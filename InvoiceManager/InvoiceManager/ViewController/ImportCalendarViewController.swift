//
//  ImportCalendarViewController.swift
//  InvoiceManager
//
//  Created by Yusuke Ishihara on 2022-06-25.
//

import UIKit
import GoogleSignIn
import GoogleAPIClientForREST

class ImportCalendarViewController: UIViewController {
    
    @IBOutlet var fetchedEventsTextField: UITextView!
    
    // test client id (generated by following instruction of  https://developers.google.com/identity/sign-in/ios/start-integrating)
    lazy var signInConfig: GIDConfiguration = {
        let clientId = ProcessInfo.processInfo.environment["OAUTH_CLIENT_ID"]!
        return GIDConfiguration(clientID: clientId)
    }()
    
    // add access scope for google apis
    let scopes = [
        "https://www.googleapis.com/auth/calendar.readonly",
        "https://www.googleapis.com/auth/calendar.events.readonly"
    ]
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        view.backgroundColor = .white
    }
    
    
    @IBAction func tapLogin(_ sender: Any) {
        
        //implementation for previous sign-in instance
        //        if GIDSignIn.sharedInstance.hasPreviousSignIn() {
        //            GIDSignIn.sharedInstance.restorePreviousSignIn()
        //            self.fetchCalendarEvents(for: GIDSignIn.sharedInstance.currentUser!)
        //        } else { }
        
        // initial login
        GIDSignIn.sharedInstance.signIn(
            with: signInConfig,
            presenting: self,
            hint: nil,
            additionalScopes: scopes
        ) { user, error in
            // implement handler
            print("\(String(describing: user)) logged in")
        }
    }
    
    @IBAction func tapFetchEvents(_ sender: Any) {
        guard let user = GIDSignIn.sharedInstance.currentUser else { return }
        
        // fetch events for the last 30 days
        let period: TimeInterval = 60*60*24*30
        let startDateTime = GTLRDateTime(date: Calendar.current.startOfDay(for: Date()-period))
        let endDateTime = GTLRDateTime(date: Date().addingTimeInterval(60*60*24))
        
        fetchCalendarEvents(for: user, from: startDateTime, to: endDateTime)
    }
    
    // test function for checking calendar event fetch
    func fetchCalendarEvents(for user: GIDGoogleUser, from: GTLRDateTime ,to: GTLRDateTime) {
        let calendarService = GTLRCalendarService()
        let authentication = user.authentication
        calendarService.authorizer = authentication.fetcherAuthorizer()
        
        let eventsListQuery = GTLRCalendarQuery_EventsList.query(withCalendarId: "primary")
        
        eventsListQuery.timeMin = from
        eventsListQuery.timeMax = to
        calendarService.executeQuery(eventsListQuery) { ticket, result, error in
            guard error == nil, let items = (result as? GTLRCalendar_Events)?.items else {
                return
            }
            if items.count > 0 {
                // Do stuff with your events
                self.fetchedEventsTextField.text = String(describing: items)
            } else {
                // No events
                print("sign in before fetch!")
            }
        }
    }
}
